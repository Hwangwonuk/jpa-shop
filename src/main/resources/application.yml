spring:
  datasource:
    url: jdbc:h2:tcp://localhost/~/jpashop
    username: sa
    password:
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
#      ddl-auto: none
    # 이 옵션은 애플리케이션 실행 시점에 테이블을 drop 하고, 다시 생성한다.
      ddl-auto: create
    properties:
      hibernate:
        # show_sql: true
        format_sql: true
        # 조회 batch size 조정(in query 개수 조정),  Query 한방에 in 쿼리로 조회 한다.
        default_batch_fetch_size: 100
        # OSIV : Open EntityManager In View : JPA
#    이 기본값을 뿌리면서 애플리케이션 시작 시점에 warn 로그를 남기는 것은 이유가 있다.
#    OSIV 전략은 트랜잭션 시작처럼 최초 데이터베이스 커넥션 시작 시점부터 API 응답이 끝날 때 까지 영속성
#    컨텍스트와 데이터베이스 커넥션을 유지한다. 그래서 지금까지 View Template이나 API 컨트롤러에서 지연 로딩이 가능했던 것이다.
#    지연 로딩은 영속성 컨텍스트가 살아있어야 가능하고, 영속성 컨텍스트는 기본적으로 데이터베이스
#    커넥션을 유지한다. 이것 자체가 큰 장점이다.
#    그런데 이 전략은 너무 오랜시간동안 데이터베이스 커넥션 리소스를 사용하기 때문에, 실시간 트래픽이
#    중요한 애플리케이션에서는 커넥션이 모자랄 수 있다. 이것은 결국 장애로 이어진다.
#    예를 들어서 컨트롤러에서 외부 API를 호출하면 외부 API 대기 시간 만큼 커넥션 리소스를 반환하지 못하고, 유지해야 한다.
#    open-in-view: false

# 모든 로그 출력은 가급적 로거를 통해 남겨야 한다.
# show_sql : 옵션은 System.out 에 하이버네이트 실행 SQL을 남긴다.
# org.hibernate.SQL : 옵션은 logger를 통해 하이버네이트 실행 SQL을 남긴다.
logging:
  level:
    org.hibernate.SQL: debug
    # 쿼리 파라미터 로그 남기기 ?로 나오던것을 아래 로그로 나타내준다.
    org.hibernate.type: trace


# 참고: 스프링 부트를 통해 복잡한 설정이 다 자동화 되었다. persistence.xml 도 없고,
# LocalContainerEntityManagerFactoryBean 도 없다. 스프링 부트를 통한 추가 설정은 스프링
# 부트 메뉴얼을 참고하고, 스프링 부트를 사용하지 않고 순수 스프링과 JPA 설정 방법은 자바 ORM 표준 JPA 프로그래밍 책을 참고하자.